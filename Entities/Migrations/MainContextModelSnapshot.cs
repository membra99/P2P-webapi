// <auto-generated />
using System;
using Entities.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Entities.Migrations
{
    [DbContext(typeof(MainContext))]
    partial class MainContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Entities.P2P.MainData.Academy", b =>
                {
                    b.Property<int>("AcademyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Excerpt")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FeaturedImage")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("SerpId")
                        .HasColumnType("int");

                    b.Property<string>("Tag")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TitleOverview")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UrlTableId")
                        .HasColumnType("int");

                    b.HasKey("AcademyId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("SerpId");

                    b.HasIndex("UrlTableId");

                    b.ToTable("Academy", "P2P");
                });

            modelBuilder.Entity("Entities.P2P.MainData.Blog", b =>
                {
                    b.Property<int>("BlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Excerpt")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageTitle")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SelectedPopularArticle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SerpId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BlogId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("SerpId");

                    b.ToTable("Blogs", "P2P");
                });

            modelBuilder.Entity("Entities.P2P.MainData.CashBack", b =>
                {
                    b.Property<int>("CashBackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CashBack_ca")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CashBack_terms")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool?>("Exclusive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCampaign")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("ReviewId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Valid_Until")
                        .HasColumnType("datetime2");

                    b.HasKey("CashBackId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ReviewId");

                    b.ToTable("CashBacks", "P2P");
                });

            modelBuilder.Entity("Entities.P2P.MainData.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId");

                    b.HasIndex("LanguageId");

                    b.ToTable("Categories", "P2P");
                });

            modelBuilder.Entity("Entities.P2P.MainData.DataType", b =>
                {
                    b.Property<int>("DataTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DataTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DataTypeId");

                    b.ToTable("DataTypes", "P2P");
                });

            modelBuilder.Entity("Entities.P2P.MainData.FaqList", b =>
                {
                    b.Property<int>("FaqPageListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("FaqTitleId")
                        .HasColumnType("int");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("FaqPageListId");

                    b.HasIndex("FaqTitleId");

                    b.ToTable("FaqLists", "P2P");
                });

            modelBuilder.Entity("Entities.P2P.MainData.FaqTitle", b =>
                {
                    b.Property<int>("FaqTitleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BlogId")
                        .HasColumnType("int");

                    b.Property<int?>("PageId")
                        .HasColumnType("int");

                    b.Property<int?>("ReviewId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("FaqTitleId");

                    b.HasIndex("BlogId");

                    b.HasIndex("PageId");

                    b.HasIndex("ReviewId");

                    b.ToTable("FaqTitles", "P2P");
                });

            modelBuilder.Entity("Entities.P2P.MainData.Language", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("LanguageId");

                    b.HasIndex("LanguageName");

                    b.ToTable("Languages", "P2P");
                });

            modelBuilder.Entity("Entities.P2P.MainData.Links", b =>
                {
                    b.Property<int>("LinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Key")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("UrlTableId")
                        .HasColumnType("int");

                    b.HasKey("LinkId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UrlTableId");

                    b.ToTable("Links", "P2P");
                });

            modelBuilder.Entity("Entities.P2P.MainData.NewsFeed", b =>
                {
                    b.Property<int>("NewsFeedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<bool>("Market")
                        .HasColumnType("bit");

                    b.Property<string>("NewsText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RedFlag")
                        .HasColumnType("bit");

                    b.Property<int?>("ReviewId")
                        .HasColumnType("int");

                    b.Property<string>("TagLine")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("UrlTableId")
                        .HasColumnType("int");

                    b.HasKey("NewsFeedId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ReviewId");

                    b.HasIndex("UrlTableId");

                    b.ToTable("NewsFeed", "P2P");
                });

            modelBuilder.Entity("Entities.P2P.MainData.Page", b =>
                {
                    b.Property<int>("PageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DataTypeId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("PageTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ReviewId")
                        .HasColumnType("int");

                    b.Property<int?>("SerpId")
                        .HasColumnType("int");

                    b.HasKey("PageId");

                    b.HasIndex("DataTypeId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ReviewId");

                    b.HasIndex("SerpId");

                    b.ToTable("Pages", "P2P");
                });

            modelBuilder.Entity("Entities.P2P.MainData.PageArticles", b =>
                {
                    b.Property<int>("PageArticleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AcademyId")
                        .HasColumnType("int");

                    b.Property<int>("PageId")
                        .HasColumnType("int");

                    b.HasKey("PageArticleId");

                    b.HasIndex("AcademyId");

                    b.HasIndex("PageId");

                    b.ToTable("PageArticles", "P2P");
                });

            modelBuilder.Entity("Entities.P2P.MainData.PagesSettings", b =>
                {
                    b.Property<int>("PagesSettingsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DataTypeId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("PageSettingsSubtitle")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Platform")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SerpId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("PagesSettingsId");

                    b.HasIndex("DataTypeId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("SerpId");

                    b.ToTable("PagesSettings", "Settings");
                });

            modelBuilder.Entity("Entities.P2P.MainData.Permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PermissionId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("Permissions", "Users");
                });

            modelBuilder.Entity("Entities.P2P.MainData.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool?>("AutoInvest")
                        .HasColumnType("bit");

                    b.Property<int?>("Availability")
                        .HasColumnType("int");

                    b.Property<string>("Bonus")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("BuybackGuarantee")
                        .HasColumnType("bit");

                    b.Property<bool?>("CashbackBonus")
                        .HasColumnType("bit");

                    b.Property<bool?>("Collateral")
                        .HasColumnType("bit");

                    b.Property<bool?>("CompareButton")
                        .HasColumnType("bit");

                    b.Property<int?>("Count")
                        .HasColumnType("int");

                    b.Property<int?>("Countries")
                        .HasColumnType("int");

                    b.Property<bool?>("CryptoAssets")
                        .HasColumnType("bit");

                    b.Property<int?>("Cryptoloan")
                        .HasColumnType("int");

                    b.Property<string>("CustomMessage")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("DiversificationMinInvest")
                        .HasColumnType("int");

                    b.Property<string>("DiversificationOtherCurrency")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long?>("Earnings")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("FacebookUrl")
                        .HasColumnType("int");

                    b.Property<string>("Features")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FinancialReport")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("InstagramUrl")
                        .HasColumnType("int");

                    b.Property<decimal?>("Interest")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("InterestRange")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<long?>("InvestorsLoss")
                        .HasColumnType("bigint");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("LegalName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("LinkedInUrl")
                        .HasColumnType("int");

                    b.Property<decimal?>("Liquidity")
                        .HasColumnType("decimal(18,4)");

                    b.Property<bool?>("LiveChat")
                        .HasColumnType("bit");

                    b.Property<int?>("LoanOriginators")
                        .HasColumnType("int");

                    b.Property<int?>("LoanType")
                        .HasColumnType("int");

                    b.Property<string>("Logo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("MaxLoanPerion")
                        .HasColumnType("int");

                    b.Property<int?>("MinInvestment")
                        .HasColumnType("int");

                    b.Property<int?>("MinLoanPerion")
                        .HasColumnType("int");

                    b.Property<bool?>("Mortage")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("NewPlatform")
                        .HasColumnType("bit");

                    b.Property<bool?>("NoProtection")
                        .HasColumnType("bit");

                    b.Property<bool?>("NotSecured")
                        .HasColumnType("bit");

                    b.Property<long?>("NumberOfInvestors")
                        .HasColumnType("bigint");

                    b.Property<string>("OfficeAddress")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("OpeningHours")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("OperatingSince")
                        .HasColumnType("int");

                    b.Property<bool?>("PersonalGuarantee")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PortfolioSize")
                        .HasColumnType("int");

                    b.Property<bool?>("Promotion")
                        .HasColumnType("bit");

                    b.Property<string>("ProtectionScheme")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("RatingCalculated")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool?>("Recommended")
                        .HasColumnType("bit");

                    b.Property<int?>("ReportLink")
                        .HasColumnType("int");

                    b.Property<string>("ReviewContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("RiskAndReturn")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("RiskReturn")
                        .HasColumnType("decimal(18,4)");

                    b.Property<bool?>("SecondaryMarket")
                        .HasColumnType("bit");

                    b.Property<int?>("SecuredBy")
                        .HasColumnType("int");

                    b.Property<bool?>("SecuredByCheck")
                        .HasColumnType("bit");

                    b.Property<int?>("SerpId")
                        .HasColumnType("int");

                    b.Property<string>("StatisticsCurrency")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("StatisticsOtherCurrency")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("Support")
                        .HasColumnType("decimal(18,4)");

                    b.Property<bool?>("TableOfContents")
                        .HasColumnType("bit");

                    b.Property<long?>("TotalLoanValue")
                        .HasColumnType("bigint");

                    b.Property<int?>("TwitterUrl")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Usability")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int?>("YoutubeUrl")
                        .HasColumnType("int");

                    b.HasKey("ReviewId");

                    b.HasIndex("FacebookUrl");

                    b.HasIndex("InstagramUrl");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LinkedInUrl");

                    b.HasIndex("ReportLink");

                    b.HasIndex("SerpId");

                    b.HasIndex("TwitterUrl");

                    b.HasIndex("YoutubeUrl");

                    b.ToTable("Review", "P2P");
                });

            modelBuilder.Entity("Entities.P2P.MainData.ReviewAttribute", b =>
                {
                    b.Property<int>("ReviewAttributeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DataTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("Index")
                        .HasColumnType("int");

                    b.Property<int>("ReviewId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ReviewAttributeId");

                    b.HasIndex("DataTypeId");

                    b.HasIndex("ReviewId");

                    b.ToTable("ReviewAttributes", "P2P");
                });

            modelBuilder.Entity("Entities.P2P.MainData.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles", "Users");
                });

            modelBuilder.Entity("Entities.P2P.MainData.Routes", b =>
                {
                    b.Property<int>("RoutesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DataTypeId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("TableId")
                        .HasColumnType("int");

                    b.Property<int>("UrlTableId")
                        .HasColumnType("int");

                    b.HasKey("RoutesId");

                    b.HasIndex("DataTypeId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UrlTableId");

                    b.ToTable("Routes", "P2P");
                });

            modelBuilder.Entity("Entities.P2P.MainData.Serp", b =>
                {
                    b.Property<int>("SerpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DataTypeId")
                        .HasColumnType("int");

                    b.Property<string>("SerpDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SerpTitle")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Subtitle")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TableId")
                        .HasColumnType("int");

                    b.HasKey("SerpId");

                    b.HasIndex("DataTypeId");

                    b.ToTable("Serps", "P2P");
                });

            modelBuilder.Entity("Entities.P2P.MainData.Settings.AboutSettings", b =>
                {
                    b.Property<int>("AboutSettingsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Paragraph")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Section1H2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Section1H3")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Section2H2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Section2Paragraph")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("SerpId")
                        .HasColumnType("int");

                    b.Property<string>("TeamH2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TestimonialH2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("VideoCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("VideoDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("AboutSettingsId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("SerpId");

                    b.ToTable("AboutSettings", "Settings");
                });

            modelBuilder.Entity("Entities.P2P.MainData.Settings.FooterSettings", b =>
                {
                    b.Property<int>("FooterSettingsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CopyrightNotice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FacebookLink")
                        .HasColumnType("int");

                    b.Property<string>("FooterNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("LinkedInLink")
                        .HasColumnType("int");

                    b.Property<int>("PodcastLink")
                        .HasColumnType("int");

                    b.Property<int>("TwitterLink")
                        .HasColumnType("int");

                    b.Property<int>("YoutubeLink")
                        .HasColumnType("int");

                    b.HasKey("FooterSettingsId");

                    b.HasIndex("FacebookLink");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LinkedInLink");

                    b.HasIndex("PodcastLink");

                    b.HasIndex("TwitterLink");

                    b.HasIndex("YoutubeLink");

                    b.ToTable("FooterSettings", "Settings");
                });

            modelBuilder.Entity("Entities.P2P.MainData.Settings.HomeSettings", b =>
                {
                    b.Property<int>("HomeSettingsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AcademyUrl")
                        .HasColumnType("int");

                    b.Property<int?>("BonusUrl")
                        .HasColumnType("int");

                    b.Property<string>("FeaturedH2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Investment")
                        .HasColumnType("int");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("NewsUrl")
                        .HasColumnType("int");

                    b.Property<string>("Platform")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Platforms")
                        .HasColumnType("int");

                    b.Property<decimal?>("Returned")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int?>("ReviewUrl")
                        .HasColumnType("int");

                    b.Property<int?>("SerpId")
                        .HasColumnType("int");

                    b.Property<string>("TestimonialH2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("HomeSettingsId");

                    b.HasIndex("AcademyUrl");

                    b.HasIndex("BonusUrl");

                    b.HasIndex("LanguageId");

                    b.HasIndex("NewsUrl");

                    b.HasIndex("ReviewUrl");

                    b.HasIndex("SerpId");

                    b.ToTable("HomeSettings", "Settings");
                });

            modelBuilder.Entity("Entities.P2P.MainData.Settings.NavigationSettings", b =>
                {
                    b.Property<int>("NavigationSettingsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Academy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("AcademyRoute")
                        .HasColumnType("int");

                    b.Property<string>("Bonus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("BonusRoute")
                        .HasColumnType("int");

                    b.Property<string>("Home")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("HomeRoute")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("News")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("NewsRoute")
                        .HasColumnType("int");

                    b.Property<string>("Reviews")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ReviewsRoute")
                        .HasColumnType("int");

                    b.HasKey("NavigationSettingsId");

                    b.HasIndex("AcademyRoute");

                    b.HasIndex("BonusRoute");

                    b.HasIndex("HomeRoute");

                    b.HasIndex("LanguageId");

                    b.HasIndex("NewsRoute");

                    b.HasIndex("ReviewsRoute");

                    b.ToTable("NavigationSettings", "Settings");
                });

            modelBuilder.Entity("Entities.P2P.MainData.Settings.SettingsAttribute", b =>
                {
                    b.Property<int>("SettingsAttributeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DataTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("Index")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("SettingsDataTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SettingsAttributeId");

                    b.HasIndex("DataTypeId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("SettingsDataTypeId");

                    b.ToTable("SettingsAttribute", "Settings");
                });

            modelBuilder.Entity("Entities.P2P.MainData.Testimonial", b =>
                {
                    b.Property<int>("TestimonialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FullName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("TagLine")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TestimonialText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("TestimonialId");

                    b.HasIndex("LanguageId");

                    b.ToTable("Testimonials", "P2P");
                });

            modelBuilder.Entity("Entities.P2P.MainData.UrlTable", b =>
                {
                    b.Property<int>("UrlTableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DataTypeId")
                        .HasColumnType("int");

                    b.Property<int>("TableId")
                        .HasColumnType("int");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("UrlTableId");

                    b.HasIndex("DataTypeId");

                    b.ToTable("UrlTables", "P2P");
                });

            modelBuilder.Entity("Entities.P2P.MainData.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users", "Users");
                });

            modelBuilder.Entity("Entities.P2P.MainData.Academy", b =>
                {
                    b.HasOne("Entities.P2P.MainData.Language", "Language")
                        .WithMany("Academies")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Entities.P2P.MainData.Serp", "Serp")
                        .WithMany("Academies")
                        .HasForeignKey("SerpId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Entities.P2P.MainData.UrlTable", "UrlTable")
                        .WithMany("Academies")
                        .HasForeignKey("UrlTableId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Language");

                    b.Navigation("Serp");

                    b.Navigation("UrlTable");
                });

            modelBuilder.Entity("Entities.P2P.MainData.Blog", b =>
                {
                    b.HasOne("Entities.P2P.MainData.User", "User")
                        .WithMany("Blogs")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Entities.P2P.MainData.Category", "Category")
                        .WithMany("Blogs")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Entities.P2P.MainData.Language", "Language")
                        .WithMany("Blogs")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Entities.P2P.MainData.Serp", "Serp")
                        .WithMany("Blogs")
                        .HasForeignKey("SerpId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Category");

                    b.Navigation("Language");

                    b.Navigation("Serp");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.P2P.MainData.CashBack", b =>
                {
                    b.HasOne("Entities.P2P.MainData.Language", "Language")
                        .WithMany("CashBacks")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.P2P.MainData.Review", "Review")
                        .WithMany("CashBacks")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Language");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("Entities.P2P.MainData.Category", b =>
                {
                    b.HasOne("Entities.P2P.MainData.Language", "Language")
                        .WithMany("Categories")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Entities.P2P.MainData.FaqList", b =>
                {
                    b.HasOne("Entities.P2P.MainData.FaqTitle", "FaqTitle")
                        .WithMany("FaqLists")
                        .HasForeignKey("FaqTitleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FaqTitle");
                });

            modelBuilder.Entity("Entities.P2P.MainData.FaqTitle", b =>
                {
                    b.HasOne("Entities.P2P.MainData.Blog", "Blog")
                        .WithMany("FaqTitles")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Entities.P2P.MainData.Page", "Page")
                        .WithMany("FaqTitles")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Entities.P2P.MainData.Review", "Review")
                        .WithMany("FaqTitles")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Blog");

                    b.Navigation("Page");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("Entities.P2P.MainData.Links", b =>
                {
                    b.HasOne("Entities.P2P.MainData.Language", "Language")
                        .WithMany("Links")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.P2P.MainData.UrlTable", "UrlTable")
                        .WithMany("Links")
                        .HasForeignKey("UrlTableId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("UrlTable");
                });

            modelBuilder.Entity("Entities.P2P.MainData.NewsFeed", b =>
                {
                    b.HasOne("Entities.P2P.MainData.Language", "Language")
                        .WithMany("NewsFeeds")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.P2P.MainData.Review", "Review")
                        .WithMany("NewsFeeds")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Entities.P2P.MainData.UrlTable", "UrlTable")
                        .WithMany("NewsFeeds")
                        .HasForeignKey("UrlTableId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Language");

                    b.Navigation("Review");

                    b.Navigation("UrlTable");
                });

            modelBuilder.Entity("Entities.P2P.MainData.Page", b =>
                {
                    b.HasOne("Entities.P2P.MainData.DataType", "DataType")
                        .WithMany("Pages")
                        .HasForeignKey("DataTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Entities.P2P.MainData.Language", "Language")
                        .WithMany("Pages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.P2P.MainData.Review", "Review")
                        .WithMany("Pages")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Entities.P2P.MainData.Serp", "Serp")
                        .WithMany("Pages")
                        .HasForeignKey("SerpId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DataType");

                    b.Navigation("Language");

                    b.Navigation("Review");

                    b.Navigation("Serp");
                });

            modelBuilder.Entity("Entities.P2P.MainData.PageArticles", b =>
                {
                    b.HasOne("Entities.P2P.MainData.Academy", "Academy")
                        .WithMany("PageArticles")
                        .HasForeignKey("AcademyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.P2P.MainData.Page", "Page")
                        .WithMany("PageArticles")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Academy");

                    b.Navigation("Page");
                });

            modelBuilder.Entity("Entities.P2P.MainData.PagesSettings", b =>
                {
                    b.HasOne("Entities.P2P.MainData.DataType", "DataType")
                        .WithMany("PagesSettings")
                        .HasForeignKey("DataTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.P2P.MainData.Language", "Language")
                        .WithMany("PagesSettings")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.P2P.MainData.Serp", "Serp")
                        .WithMany("PagesSettings")
                        .HasForeignKey("SerpId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DataType");

                    b.Navigation("Language");

                    b.Navigation("Serp");
                });

            modelBuilder.Entity("Entities.P2P.MainData.Permission", b =>
                {
                    b.HasOne("Entities.P2P.MainData.Language", "Language")
                        .WithMany("Permissions")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.P2P.MainData.Role", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.P2P.MainData.User", "User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.P2P.MainData.Review", b =>
                {
                    b.HasOne("Entities.P2P.MainData.UrlTable", "Rev_FacebookUrl")
                        .WithMany("Rev_FacebookUrls")
                        .HasForeignKey("FacebookUrl")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Entities.P2P.MainData.UrlTable", "Rev_InstagramUrl")
                        .WithMany("Rev_InstagramUrls")
                        .HasForeignKey("InstagramUrl")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Entities.P2P.MainData.Language", "Language")
                        .WithMany("Reviews")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.P2P.MainData.UrlTable", "Rev_LinkedInUrl")
                        .WithMany("Rev_LinkedIdUrls")
                        .HasForeignKey("LinkedInUrl")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Entities.P2P.MainData.UrlTable", "Rev_ReportLink")
                        .WithMany("Rev_ReportLinks")
                        .HasForeignKey("ReportLink")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Entities.P2P.MainData.Serp", "Serp")
                        .WithMany("Reviews")
                        .HasForeignKey("SerpId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Entities.P2P.MainData.UrlTable", "Rev_TwitterUrl")
                        .WithMany("Rev_TwitterUrls")
                        .HasForeignKey("TwitterUrl")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Entities.P2P.MainData.UrlTable", "Rev_YoutubeUrl")
                        .WithMany("Rev_YoutubeUrls")
                        .HasForeignKey("YoutubeUrl")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Language");

                    b.Navigation("Rev_FacebookUrl");

                    b.Navigation("Rev_InstagramUrl");

                    b.Navigation("Rev_LinkedInUrl");

                    b.Navigation("Rev_ReportLink");

                    b.Navigation("Rev_TwitterUrl");

                    b.Navigation("Rev_YoutubeUrl");

                    b.Navigation("Serp");
                });

            modelBuilder.Entity("Entities.P2P.MainData.ReviewAttribute", b =>
                {
                    b.HasOne("Entities.P2P.MainData.DataType", "DataType")
                        .WithMany("ReviewAttributes")
                        .HasForeignKey("DataTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.P2P.MainData.Review", "Review")
                        .WithMany("ReviewAttribute")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DataType");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("Entities.P2P.MainData.Routes", b =>
                {
                    b.HasOne("Entities.P2P.MainData.DataType", "DataType")
                        .WithMany("Routes")
                        .HasForeignKey("DataTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.P2P.MainData.Language", "Language")
                        .WithMany("Routes")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.P2P.MainData.UrlTable", "UrlTable")
                        .WithMany("Routes")
                        .HasForeignKey("UrlTableId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DataType");

                    b.Navigation("Language");

                    b.Navigation("UrlTable");
                });

            modelBuilder.Entity("Entities.P2P.MainData.Serp", b =>
                {
                    b.HasOne("Entities.P2P.MainData.DataType", "DataType")
                        .WithMany("Serps")
                        .HasForeignKey("DataTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DataType");
                });

            modelBuilder.Entity("Entities.P2P.MainData.Settings.AboutSettings", b =>
                {
                    b.HasOne("Entities.P2P.MainData.Language", "Language")
                        .WithMany("AboutSettings")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Entities.P2P.MainData.Serp", "Serp")
                        .WithMany("AboutSettings")
                        .HasForeignKey("SerpId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Language");

                    b.Navigation("Serp");
                });

            modelBuilder.Entity("Entities.P2P.MainData.Settings.FooterSettings", b =>
                {
                    b.HasOne("Entities.P2P.MainData.UrlTable", "FS_FacebookUrl")
                        .WithMany("FacebookUrls")
                        .HasForeignKey("FacebookLink")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.P2P.MainData.Language", "Language")
                        .WithMany("FooterSettings")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.P2P.MainData.UrlTable", "FS_LinkedInUrl")
                        .WithMany("LinkedInUrls")
                        .HasForeignKey("LinkedInLink")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.P2P.MainData.UrlTable", "FS_PodcastUrl")
                        .WithMany("PodcastUrls")
                        .HasForeignKey("PodcastLink")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.P2P.MainData.UrlTable", "FS_TwitterUrl")
                        .WithMany("TwitterUrls")
                        .HasForeignKey("TwitterLink")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.P2P.MainData.UrlTable", "FS_YoutubeUrl")
                        .WithMany("YoutubeUrls")
                        .HasForeignKey("YoutubeLink")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FS_FacebookUrl");

                    b.Navigation("FS_LinkedInUrl");

                    b.Navigation("FS_PodcastUrl");

                    b.Navigation("FS_TwitterUrl");

                    b.Navigation("FS_YoutubeUrl");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Entities.P2P.MainData.Settings.HomeSettings", b =>
                {
                    b.HasOne("Entities.P2P.MainData.UrlTable", "AcademyUrls")
                        .WithMany("AcademyUrls")
                        .HasForeignKey("AcademyUrl")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Entities.P2P.MainData.UrlTable", "BonusUrls")
                        .WithMany("BonusUrls")
                        .HasForeignKey("BonusUrl")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Entities.P2P.MainData.Language", "Language")
                        .WithMany("HomeSettings")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Entities.P2P.MainData.UrlTable", "NewsUrls")
                        .WithMany("NewsUrls")
                        .HasForeignKey("NewsUrl")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Entities.P2P.MainData.UrlTable", "ReviewUrls")
                        .WithMany("ReviewUrls")
                        .HasForeignKey("ReviewUrl")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Entities.P2P.MainData.Serp", "Serp")
                        .WithMany("HomeSettings")
                        .HasForeignKey("SerpId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AcademyUrls");

                    b.Navigation("BonusUrls");

                    b.Navigation("Language");

                    b.Navigation("NewsUrls");

                    b.Navigation("ReviewUrls");

                    b.Navigation("Serp");
                });

            modelBuilder.Entity("Entities.P2P.MainData.Settings.NavigationSettings", b =>
                {
                    b.HasOne("Entities.P2P.MainData.UrlTable", "AcademyRouteLink")
                        .WithMany("AcademyRouteLinks")
                        .HasForeignKey("AcademyRoute")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.P2P.MainData.UrlTable", "BonusRouteLink")
                        .WithMany("BonusRouteLinks")
                        .HasForeignKey("BonusRoute")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.P2P.MainData.UrlTable", "HomeRouteLink")
                        .WithMany("HomeRouteLinks")
                        .HasForeignKey("HomeRoute")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.P2P.MainData.Language", "Language")
                        .WithMany("NavigationSettings")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.P2P.MainData.UrlTable", "NewsRouteLink")
                        .WithMany("NewsRouteLinks")
                        .HasForeignKey("NewsRoute")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.P2P.MainData.UrlTable", "ReviewsRouteLink")
                        .WithMany("ReviewsRouteLinks")
                        .HasForeignKey("ReviewsRoute")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AcademyRouteLink");

                    b.Navigation("BonusRouteLink");

                    b.Navigation("HomeRouteLink");

                    b.Navigation("Language");

                    b.Navigation("NewsRouteLink");

                    b.Navigation("ReviewsRouteLink");
                });

            modelBuilder.Entity("Entities.P2P.MainData.Settings.SettingsAttribute", b =>
                {
                    b.HasOne("Entities.P2P.MainData.DataType", "DataType")
                        .WithMany("DataTypes")
                        .HasForeignKey("DataTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.P2P.MainData.Language", "Language")
                        .WithMany("SettingsAttributes")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.P2P.MainData.DataType", "SettingsDataType")
                        .WithMany("SettingsDataTypes")
                        .HasForeignKey("SettingsDataTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DataType");

                    b.Navigation("Language");

                    b.Navigation("SettingsDataType");
                });

            modelBuilder.Entity("Entities.P2P.MainData.Testimonial", b =>
                {
                    b.HasOne("Entities.P2P.MainData.Language", "Language")
                        .WithMany("Testimonials")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Entities.P2P.MainData.UrlTable", b =>
                {
                    b.HasOne("Entities.P2P.MainData.DataType", "DataType")
                        .WithMany("UrlTables")
                        .HasForeignKey("DataTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DataType");
                });

            modelBuilder.Entity("Entities.P2P.MainData.Academy", b =>
                {
                    b.Navigation("PageArticles");
                });

            modelBuilder.Entity("Entities.P2P.MainData.Blog", b =>
                {
                    b.Navigation("FaqTitles");
                });

            modelBuilder.Entity("Entities.P2P.MainData.Category", b =>
                {
                    b.Navigation("Blogs");
                });

            modelBuilder.Entity("Entities.P2P.MainData.DataType", b =>
                {
                    b.Navigation("DataTypes");

                    b.Navigation("Pages");

                    b.Navigation("PagesSettings");

                    b.Navigation("ReviewAttributes");

                    b.Navigation("Routes");

                    b.Navigation("Serps");

                    b.Navigation("SettingsDataTypes");

                    b.Navigation("UrlTables");
                });

            modelBuilder.Entity("Entities.P2P.MainData.FaqTitle", b =>
                {
                    b.Navigation("FaqLists");
                });

            modelBuilder.Entity("Entities.P2P.MainData.Language", b =>
                {
                    b.Navigation("AboutSettings");

                    b.Navigation("Academies");

                    b.Navigation("Blogs");

                    b.Navigation("CashBacks");

                    b.Navigation("Categories");

                    b.Navigation("FooterSettings");

                    b.Navigation("HomeSettings");

                    b.Navigation("Links");

                    b.Navigation("NavigationSettings");

                    b.Navigation("NewsFeeds");

                    b.Navigation("Pages");

                    b.Navigation("PagesSettings");

                    b.Navigation("Permissions");

                    b.Navigation("Reviews");

                    b.Navigation("Routes");

                    b.Navigation("SettingsAttributes");

                    b.Navigation("Testimonials");
                });

            modelBuilder.Entity("Entities.P2P.MainData.Page", b =>
                {
                    b.Navigation("FaqTitles");

                    b.Navigation("PageArticles");
                });

            modelBuilder.Entity("Entities.P2P.MainData.Review", b =>
                {
                    b.Navigation("CashBacks");

                    b.Navigation("FaqTitles");

                    b.Navigation("NewsFeeds");

                    b.Navigation("Pages");

                    b.Navigation("ReviewAttribute");
                });

            modelBuilder.Entity("Entities.P2P.MainData.Role", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("Entities.P2P.MainData.Serp", b =>
                {
                    b.Navigation("AboutSettings");

                    b.Navigation("Academies");

                    b.Navigation("Blogs");

                    b.Navigation("HomeSettings");

                    b.Navigation("Pages");

                    b.Navigation("PagesSettings");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Entities.P2P.MainData.UrlTable", b =>
                {
                    b.Navigation("Academies");

                    b.Navigation("AcademyRouteLinks");

                    b.Navigation("AcademyUrls");

                    b.Navigation("BonusRouteLinks");

                    b.Navigation("BonusUrls");

                    b.Navigation("FacebookUrls");

                    b.Navigation("HomeRouteLinks");

                    b.Navigation("LinkedInUrls");

                    b.Navigation("Links");

                    b.Navigation("NewsFeeds");

                    b.Navigation("NewsRouteLinks");

                    b.Navigation("NewsUrls");

                    b.Navigation("PodcastUrls");

                    b.Navigation("Rev_FacebookUrls");

                    b.Navigation("Rev_InstagramUrls");

                    b.Navigation("Rev_LinkedIdUrls");

                    b.Navigation("Rev_ReportLinks");

                    b.Navigation("Rev_TwitterUrls");

                    b.Navigation("Rev_YoutubeUrls");

                    b.Navigation("ReviewsRouteLinks");

                    b.Navigation("ReviewUrls");

                    b.Navigation("Routes");

                    b.Navigation("TwitterUrls");

                    b.Navigation("YoutubeUrls");
                });

            modelBuilder.Entity("Entities.P2P.MainData.User", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("Permissions");
                });
#pragma warning restore 612, 618
        }
    }
}
